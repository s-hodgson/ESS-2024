
RTOS_Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f8  080047f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b0  20000010  08004810  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  08004810  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012903  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5a  00000000  00000000  00032943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00036430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002965  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ee0  00000000  00000000  00039cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d02d5  00000000  00000000  0004abdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011aeb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  0011af04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004750 	.word	0x08004750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004750 	.word	0x08004750

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f9d4 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f824 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f880 	bl	80005e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f001 fb74 	bl	8001bd0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 80004e8:	4a09      	ldr	r2, [pc, #36]	; (8000510 <main+0x3c>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <main+0x40>)
 80004ee:	f001 fbd9 	bl	8001ca4 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <main+0x44>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <main+0x48>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x4c>)
 80004fe:	f001 fbd1 	bl	8001ca4 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <main+0x50>)
 8000506:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f001 fb96 	bl	8001c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x38>
 800050e:	bf00      	nop
 8000510:	08004790 	.word	0x08004790
 8000514:	0800064d 	.word	0x0800064d
 8000518:	2000002c 	.word	0x2000002c
 800051c:	080047b4 	.word	0x080047b4
 8000520:	0800066d 	.word	0x0800066d
 8000524:	20000030 	.word	0x20000030

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 f902 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xb4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xb4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <SystemClock_Config+0xb8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <SystemClock_Config+0xb8>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0320 	add.w	r3, r7, #32
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fc67 	bl	8000e6c <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a4:	f000 f884 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fec0 	bl	8001348 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005ce:	f000 f86f 	bl	80006b0 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_GPIO_Init+0x60>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <MX_GPIO_Init+0x60>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_GPIO_Init+0x60>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <MX_GPIO_Init+0x64>)
 800061c:	f000 fbf2 	bl	8000e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000620:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000624:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0x64>)
 8000638:	f000 fa48 	bl	8000acc <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40020c00 	.word	0x40020c00

0800064c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <StartBlink01+0x1c>)
 800065a:	f000 fbec 	bl	8000e36 <HAL_GPIO_TogglePin>
    osDelay(100);
 800065e:	2064      	movs	r0, #100	; 0x64
 8000660:	f001 fbc6 	bl	8001df0 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000664:	e7f6      	b.n	8000654 <StartBlink01+0x8>
 8000666:	bf00      	nop
 8000668:	40020c00 	.word	0x40020c00

0800066c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <StartBlink02+0x1c>)
 800067a:	f000 fbdc 	bl	8000e36 <HAL_GPIO_TogglePin>
	osDelay(600);
 800067e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000682:	f001 fbb5 	bl	8001df0 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000686:	e7f5      	b.n	8000674 <StartBlink02+0x8>
 8000688:	40020c00 	.word	0x40020c00

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 f913 	bl	80008c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40001000 	.word	0x40001000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_MspInit+0x54>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <HAL_MspInit+0x54>)
 80006cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x54>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_MspInit+0x54>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_MspInit+0x54>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_MspInit+0x54>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	210f      	movs	r1, #15
 80006fe:	f06f 0001 	mvn.w	r0, #1
 8000702:	f000 f9b9 	bl	8000a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f000 f9a5 	bl	8000a78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800072e:	2036      	movs	r0, #54	; 0x36
 8000730:	f000 f9be 	bl	8000ab0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <HAL_InitTick+0xa0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <HAL_InitTick+0xa0>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <HAL_InitTick+0xa0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000750:	f107 0210 	add.w	r2, r7, #16
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ffc0 	bl	80016e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000760:	f000 ffaa 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8000764:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_InitTick+0xa4>)
 800076a:	fba2 2303 	umull	r2, r3, r2, r3
 800076e:	0c9b      	lsrs	r3, r3, #18
 8000770:	3b01      	subs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_InitTick+0xa8>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_InitTick+0xac>)
 8000778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_InitTick+0xa8>)
 800077c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_InitTick+0xa8>)
 8000784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_InitTick+0xa8>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_InitTick+0xa8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <HAL_InitTick+0xa8>)
 8000796:	f000 ffd5 	bl	8001744 <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <HAL_InitTick+0xa8>)
 80007a2:	f001 f804 	bl	80017ae <HAL_TIM_Base_Start_IT>
 80007a6:	4603      	mov	r3, r0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3730      	adds	r7, #48	; 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	431bde83 	.word	0x431bde83
 80007bc:	20000034 	.word	0x20000034
 80007c0:	40001000 	.word	0x40001000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM6_DAC_IRQHandler+0x10>)
 80007f6:	f000 fffe 	bl	80017f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000034 	.word	0x20000034

08000804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <SystemInit+0x28>)
 800080a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <SystemInit+0x28>)
 8000810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <SystemInit+0x28>)
 800081a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081e:	609a      	str	r2, [r3, #8]
#endif
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000836:	e003      	b.n	8000840 <LoopCopyDataInit>

08000838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800083a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800083c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800083e:	3104      	adds	r1, #4

08000840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000848:	d3f6      	bcc.n	8000838 <CopyDataInit>
  ldr  r2, =_sbss
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800084c:	e002      	b.n	8000854 <LoopFillZerobss>

0800084e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800084e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000850:	f842 3b04 	str.w	r3, [r2], #4

08000854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000858:	d3f9      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800085a:	f7ff ffd3 	bl	8000804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f003 ff3d 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe37 	bl	80004d4 <main>
  bx  lr    
 8000866:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000868:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800086c:	08004800 	.word	0x08004800
  ldr  r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000874:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000878:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800087c:	200049c0 	.word	0x200049c0

08000880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_Init+0x40>)
 800088e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_Init+0x40>)
 800089a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x40>)
 80008a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f8d8 	bl	8000a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff2e 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff ff00 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023c00 	.word	0x40023c00

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000074 	.word	0x20000074

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000074 	.word	0x20000074

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4907      	ldr	r1, [pc, #28]	; (80009a4 <__NVIC_EnableIRQ+0x38>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	; (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	; (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	; 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff4c 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8a:	f7ff ff61 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f7ff ffb1 	bl	80009fc <NVIC_EncodePriority>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff80 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff54 	bl	800096c <__NVIC_EnableIRQ>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	e16b      	b.n	8000dc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	f040 815a 	bne.w	8000dba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d00b      	beq.n	8000b26 <HAL_GPIO_Init+0x5a>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d007      	beq.n	8000b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1a:	2b11      	cmp	r3, #17
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d130      	bne.n	8000b88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	f003 0201 	and.w	r2, r3, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0xfc>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b12      	cmp	r3, #18
 8000bc6:	d123      	bne.n	8000c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	08da      	lsrs	r2, r3, #3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	69b9      	ldr	r1, [r7, #24]
 8000c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0203 	and.w	r2, r3, #3
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 80b4 	beq.w	8000dba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b60      	ldr	r3, [pc, #384]	; (8000dd8 <HAL_GPIO_Init+0x30c>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a5f      	ldr	r2, [pc, #380]	; (8000dd8 <HAL_GPIO_Init+0x30c>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <HAL_GPIO_Init+0x30c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6e:	4a5b      	ldr	r2, [pc, #364]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <HAL_GPIO_Init+0x314>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d02b      	beq.n	8000cf2 <HAL_GPIO_Init+0x226>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a51      	ldr	r2, [pc, #324]	; (8000de4 <HAL_GPIO_Init+0x318>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d025      	beq.n	8000cee <HAL_GPIO_Init+0x222>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a50      	ldr	r2, [pc, #320]	; (8000de8 <HAL_GPIO_Init+0x31c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d01f      	beq.n	8000cea <HAL_GPIO_Init+0x21e>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4f      	ldr	r2, [pc, #316]	; (8000dec <HAL_GPIO_Init+0x320>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d019      	beq.n	8000ce6 <HAL_GPIO_Init+0x21a>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4e      	ldr	r2, [pc, #312]	; (8000df0 <HAL_GPIO_Init+0x324>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0x216>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4d      	ldr	r2, [pc, #308]	; (8000df4 <HAL_GPIO_Init+0x328>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <HAL_GPIO_Init+0x212>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <HAL_GPIO_Init+0x32c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x20e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4b      	ldr	r2, [pc, #300]	; (8000dfc <HAL_GPIO_Init+0x330>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x20a>
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	e00e      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	e00c      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cda:	2306      	movs	r3, #6
 8000cdc:	e00a      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cde:	2305      	movs	r3, #5
 8000ce0:	e008      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e006      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e004      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_GPIO_Init+0x228>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	f002 0203 	and.w	r2, r2, #3
 8000cfa:	0092      	lsls	r2, r2, #2
 8000cfc:	4093      	lsls	r3, r2
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d04:	4935      	ldr	r1, [pc, #212]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	089b      	lsrs	r3, r3, #2
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d12:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d8a:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db4:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_GPIO_Init+0x334>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	f67f ae90 	bls.w	8000ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40013800 	.word	0x40013800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40021400 	.word	0x40021400
 8000df8:	40021800 	.word	0x40021800
 8000dfc:	40021c00 	.word	0x40021c00
 8000e00:	40013c00 	.word	0x40013c00

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e20:	e003      	b.n	8000e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	619a      	str	r2, [r3, #24]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	401a      	ands	r2, r3
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d104      	bne.n	8000e5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	041a      	lsls	r2, r3, #16
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e25e      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d075      	beq.n	8000f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e8a:	4b88      	ldr	r3, [pc, #544]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d00c      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e96:	4b85      	ldr	r3, [pc, #532]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d112      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ea2:	4b82      	ldr	r3, [pc, #520]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eae:	d10b      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb0:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d05b      	beq.n	8000f74 <HAL_RCC_OscConfig+0x108>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d157      	bne.n	8000f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e239      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d106      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x74>
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e01d      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000eea:	4b70      	ldr	r3, [pc, #448]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6f      	ldr	r2, [pc, #444]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e00b      	b.n	8000f1c <HAL_RCC_OscConfig+0xb0>
 8000f04:	4b69      	ldr	r3, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a68      	ldr	r2, [pc, #416]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b66      	ldr	r3, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a65      	ldr	r2, [pc, #404]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fce4 	bl	80008f0 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fce0 	bl	80008f0 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e1fe      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4b5b      	ldr	r3, [pc, #364]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0xc0>
 8000f4a:	e014      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcd0 	bl	80008f0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fccc 	bl	80008f0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1ea      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f66:	4b51      	ldr	r3, [pc, #324]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0xe8>
 8000f72:	e000      	b.n	8000f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d063      	beq.n	800104a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f82:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f8e:	4b47      	ldr	r3, [pc, #284]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d11c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d116      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa6:	4b41      	ldr	r3, [pc, #260]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d001      	beq.n	8000fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e1be      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	e03a      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d020      	beq.n	800101e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_OscConfig+0x244>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fc85 	bl	80008f0 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fea:	f7ff fc81 	bl	80008f0 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e19f      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4925      	ldr	r1, [pc, #148]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800101e:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_RCC_OscConfig+0x244>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fc64 	bl	80008f0 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fc60 	bl	80008f0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e17e      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d036      	beq.n	80010c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d016      	beq.n	800108c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_RCC_OscConfig+0x248>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001064:	f7ff fc44 	bl	80008f0 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106c:	f7ff fc40 	bl	80008f0 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e15e      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x240>)
 8001080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x200>
 800108a:	e01b      	b.n	80010c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_RCC_OscConfig+0x248>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fc2d 	bl	80008f0 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001098:	e00e      	b.n	80010b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800109a:	f7ff fc29 	bl	80008f0 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d907      	bls.n	80010b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e147      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
 80010ac:	40023800 	.word	0x40023800
 80010b0:	42470000 	.word	0x42470000
 80010b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b8:	4b88      	ldr	r3, [pc, #544]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ea      	bne.n	800109a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8097 	beq.w	8001200 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b7d      	ldr	r3, [pc, #500]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a7c      	ldr	r2, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010fe:	2301      	movs	r3, #1
 8001100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b77      	ldr	r3, [pc, #476]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800110e:	4b74      	ldr	r3, [pc, #464]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a73      	ldr	r2, [pc, #460]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800111a:	f7ff fbe9 	bl	80008f0 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001122:	f7ff fbe5 	bl	80008f0 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e103      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001134:	4b6a      	ldr	r3, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x474>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d106      	bne.n	8001156 <HAL_RCC_OscConfig+0x2ea>
 8001148:	4b64      	ldr	r3, [pc, #400]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6713      	str	r3, [r2, #112]	; 0x70
 8001154:	e01c      	b.n	8001190 <HAL_RCC_OscConfig+0x324>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x30c>
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001162:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6713      	str	r3, [r2, #112]	; 0x70
 800116a:	4b5c      	ldr	r3, [pc, #368]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116e:	4a5b      	ldr	r2, [pc, #364]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6713      	str	r3, [r2, #112]	; 0x70
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0x324>
 8001178:	4b58      	ldr	r3, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800117a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800117c:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6713      	str	r3, [r2, #112]	; 0x70
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d015      	beq.n	80011c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001198:	f7ff fbaa 	bl	80008f0 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fba6 	bl	80008f0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0c2      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0ee      	beq.n	80011a0 <HAL_RCC_OscConfig+0x334>
 80011c2:	e014      	b.n	80011ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c4:	f7ff fb94 	bl	80008f0 <HAL_GetTick>
 80011c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f7ff fb90 	bl	80008f0 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011da:	4293      	cmp	r3, r2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e0ac      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e2:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ee      	bne.n	80011cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a38      	ldr	r2, [pc, #224]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80011fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8098 	beq.w	800133a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b08      	cmp	r3, #8
 8001214:	d05c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d141      	bne.n	80012a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fb64 	bl	80008f0 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fb60 	bl	80008f0 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e07e      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	3b01      	subs	r3, #1
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	061b      	lsls	r3, r3, #24
 800126e:	491b      	ldr	r1, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb39 	bl	80008f0 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fb35 	bl	80008f0 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e053      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x416>
 80012a0:	e04b      	b.n	800133a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_RCC_OscConfig+0x478>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb22 	bl	80008f0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fb1e 	bl	80008f0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e03c      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RCC_OscConfig+0x470>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x444>
 80012ce:	e034      	b.n	800133a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e02f      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000
 80012e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_RCC_OscConfig+0x4d8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d11c      	bne.n	8001336 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d115      	bne.n	8001336 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001310:	4013      	ands	r3, r2
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001324:	429a      	cmp	r2, r3
 8001326:	d106      	bne.n	8001336 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0cc      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b68      	ldr	r3, [pc, #416]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d90c      	bls.n	8001384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b65      	ldr	r3, [pc, #404]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b8      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a58      	ldr	r2, [pc, #352]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	494d      	ldr	r1, [pc, #308]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d044      	beq.n	8001468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d119      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001402:	2b03      	cmp	r3, #3
 8001404:	d107      	bne.n	8001416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d109      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e067      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f023 0203 	bic.w	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4934      	ldr	r1, [pc, #208]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	4313      	orrs	r3, r2
 8001436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001438:	f7ff fa5a 	bl	80008f0 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	e00a      	b.n	8001456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001440:	f7ff fa56 	bl	80008f0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	f241 3288 	movw	r2, #5000	; 0x1388
 800144e:	4293      	cmp	r3, r2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e04f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 020c 	and.w	r2, r3, #12
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	429a      	cmp	r2, r3
 8001466:	d1eb      	bne.n	8001440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d20c      	bcs.n	8001490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e032      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4916      	ldr	r1, [pc, #88]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	490e      	ldr	r1, [pc, #56]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ce:	f000 f821 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490a      	ldr	r1, [pc, #40]	; (8001508 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x1c8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f910 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00
 8001504:	40023800 	.word	0x40023800
 8001508:	080047d8 	.word	0x080047d8
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001518:	b090      	sub	sp, #64	; 0x40
 800151a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d00d      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x40>
 8001538:	2b08      	cmp	r3, #8
 800153a:	f200 80a1 	bhi.w	8001680 <HAL_RCC_GetSysClockFreq+0x16c>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x34>
 8001542:	2b04      	cmp	r3, #4
 8001544:	d003      	beq.n	800154e <HAL_RCC_GetSysClockFreq+0x3a>
 8001546:	e09b      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_GetSysClockFreq+0x184>)
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800154c:	e09b      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001552:	e098      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001554:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800155e:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d028      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	099b      	lsrs	r3, r3, #6
 8001570:	2200      	movs	r2, #0
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	627a      	str	r2, [r7, #36]	; 0x24
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800157c:	2100      	movs	r1, #0
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 8001580:	fb03 f201 	mul.w	r2, r3, r1
 8001584:	2300      	movs	r3, #0
 8001586:	fb00 f303 	mul.w	r3, r0, r3
 800158a:	4413      	add	r3, r2
 800158c:	4a43      	ldr	r2, [pc, #268]	; (800169c <HAL_RCC_GetSysClockFreq+0x188>)
 800158e:	fba0 1202 	umull	r1, r2, r0, r2
 8001592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001594:	460a      	mov	r2, r1
 8001596:	62ba      	str	r2, [r7, #40]	; 0x28
 8001598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800159a:	4413      	add	r3, r2
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	2200      	movs	r2, #0
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	61fa      	str	r2, [r7, #28]
 80015a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015ae:	f7fe fe0f 	bl	80001d0 <__aeabi_uldivmod>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4613      	mov	r3, r2
 80015b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ba:	e053      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	2200      	movs	r2, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	617a      	str	r2, [r7, #20]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015ce:	f04f 0b00 	mov.w	fp, #0
 80015d2:	4652      	mov	r2, sl
 80015d4:	465b      	mov	r3, fp
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0159      	lsls	r1, r3, #5
 80015e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e4:	0150      	lsls	r0, r2, #5
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ebb2 080a 	subs.w	r8, r2, sl
 80015ee:	eb63 090b 	sbc.w	r9, r3, fp
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001602:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001606:	ebb2 0408 	subs.w	r4, r2, r8
 800160a:	eb63 0509 	sbc.w	r5, r3, r9
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	00eb      	lsls	r3, r5, #3
 8001618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161c:	00e2      	lsls	r2, r4, #3
 800161e:	4614      	mov	r4, r2
 8001620:	461d      	mov	r5, r3
 8001622:	eb14 030a 	adds.w	r3, r4, sl
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	eb45 030b 	adc.w	r3, r5, fp
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800163a:	4629      	mov	r1, r5
 800163c:	028b      	lsls	r3, r1, #10
 800163e:	4621      	mov	r1, r4
 8001640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001644:	4621      	mov	r1, r4
 8001646:	028a      	lsls	r2, r1, #10
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164e:	2200      	movs	r2, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001658:	f7fe fdba 	bl	80001d0 <__aeabi_uldivmod>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4613      	mov	r3, r2
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_GetSysClockFreq+0x180>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0c1b      	lsrs	r3, r3, #16
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	3301      	adds	r3, #1
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800167e:	e002      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_GetSysClockFreq+0x184>)
 8001682:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001688:	4618      	mov	r0, r3
 800168a:	3740      	adds	r7, #64	; 0x40
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	00f42400 	.word	0x00f42400
 800169c:	017d7840 	.word	0x017d7840

080016a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016bc:	f7ff fff0 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	0a9b      	lsrs	r3, r3, #10
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	080047e8 	.word	0x080047e8

080016e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	220f      	movs	r2, #15
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_GetClockConfig+0x5c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_GetClockConfig+0x60>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 020f 	and.w	r2, r3, #15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e01d      	b.n	8001792 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f815 	bl	800179a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2202      	movs	r2, #2
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3304      	adds	r3, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f000 f968 	bl	8001a58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b06      	cmp	r3, #6
 80017d6:	d007      	beq.n	80017e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b02      	cmp	r3, #2
 800180a:	d122      	bne.n	8001852 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d11b      	bne.n	8001852 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0202 	mvn.w	r2, #2
 8001822:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f8ee 	bl	8001a1a <HAL_TIM_IC_CaptureCallback>
 800183e:	e005      	b.n	800184c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f8e0 	bl	8001a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8f1 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d122      	bne.n	80018a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b04      	cmp	r3, #4
 800186c:	d11b      	bne.n	80018a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f06f 0204 	mvn.w	r2, #4
 8001876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8c4 	bl	8001a1a <HAL_TIM_IC_CaptureCallback>
 8001892:	e005      	b.n	80018a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 f8b6 	bl	8001a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8c7 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d122      	bne.n	80018fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11b      	bne.n	80018fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f06f 0208 	mvn.w	r2, #8
 80018ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2204      	movs	r2, #4
 80018d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f89a 	bl	8001a1a <HAL_TIM_IC_CaptureCallback>
 80018e6:	e005      	b.n	80018f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f88c 	bl	8001a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f89d 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b10      	cmp	r3, #16
 8001906:	d122      	bne.n	800194e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b10      	cmp	r3, #16
 8001914:	d11b      	bne.n	800194e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f06f 0210 	mvn.w	r2, #16
 800191e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2208      	movs	r2, #8
 8001924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f870 	bl	8001a1a <HAL_TIM_IC_CaptureCallback>
 800193a:	e005      	b.n	8001948 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f862 	bl	8001a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f873 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10e      	bne.n	800197a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0201 	mvn.w	r2, #1
 8001972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7fe fe89 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	2b80      	cmp	r3, #128	; 0x80
 8001986:	d10e      	bne.n	80019a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	2b80      	cmp	r3, #128	; 0x80
 8001994:	d107      	bne.n	80019a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800199e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f903 	bl	8001bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b0:	2b40      	cmp	r3, #64	; 0x40
 80019b2:	d10e      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019be:	2b40      	cmp	r3, #64	; 0x40
 80019c0:	d107      	bne.n	80019d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f838 	bl	8001a42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d10e      	bne.n	80019fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d107      	bne.n	80019fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f06f 0220 	mvn.w	r2, #32
 80019f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8cd 	bl	8001b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <TIM_Base_SetConfig+0x114>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <TIM_Base_SetConfig+0x40>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a76:	d00f      	beq.n	8001a98 <TIM_Base_SetConfig+0x40>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <TIM_Base_SetConfig+0x118>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00b      	beq.n	8001a98 <TIM_Base_SetConfig+0x40>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3c      	ldr	r2, [pc, #240]	; (8001b74 <TIM_Base_SetConfig+0x11c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <TIM_Base_SetConfig+0x40>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	; (8001b78 <TIM_Base_SetConfig+0x120>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d003      	beq.n	8001a98 <TIM_Base_SetConfig+0x40>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3a      	ldr	r2, [pc, #232]	; (8001b7c <TIM_Base_SetConfig+0x124>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d108      	bne.n	8001aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <TIM_Base_SetConfig+0x114>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02b      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d027      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <TIM_Base_SetConfig+0x118>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d023      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <TIM_Base_SetConfig+0x11c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <TIM_Base_SetConfig+0x120>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01b      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <TIM_Base_SetConfig+0x124>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d017      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a28      	ldr	r2, [pc, #160]	; (8001b80 <TIM_Base_SetConfig+0x128>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <TIM_Base_SetConfig+0x12c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00f      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <TIM_Base_SetConfig+0x130>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00b      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <TIM_Base_SetConfig+0x134>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <TIM_Base_SetConfig+0x138>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d003      	beq.n	8001b0a <TIM_Base_SetConfig+0xb2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <TIM_Base_SetConfig+0x13c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d108      	bne.n	8001b1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <TIM_Base_SetConfig+0x114>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <TIM_Base_SetConfig+0xf8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <TIM_Base_SetConfig+0x124>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d103      	bne.n	8001b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	615a      	str	r2, [r3, #20]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40010400 	.word	0x40010400
 8001b80:	40014000 	.word	0x40014000
 8001b84:	40014400 	.word	0x40014400
 8001b88:	40014800 	.word	0x40014800
 8001b8c:	40001800 	.word	0x40001800
 8001b90:	40001c00 	.word	0x40001c00
 8001b94:	40002000 	.word	0x40002000

08001b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bd6:	f3ef 8305 	mrs	r3, IPSR
 8001bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be2:	f3ef 8310 	mrs	r3, PRIMASK
 8001be6:	607b      	str	r3, [r7, #4]
  return(result);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bee:	f3ef 8311 	mrs	r3, BASEPRI
 8001bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <osKernelInitialize+0x3a>
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <osKernelInitialize+0x64>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d103      	bne.n	8001c0a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001c02:	f06f 0305 	mvn.w	r3, #5
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e00c      	b.n	8001c24 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <osKernelInitialize+0x64>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d105      	bne.n	8001c1e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <osKernelInitialize+0x64>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e002      	b.n	8001c24 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c24:	68fb      	ldr	r3, [r7, #12]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000078 	.word	0x20000078

08001c38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c3e:	f3ef 8305 	mrs	r3, IPSR
 8001c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4e:	607b      	str	r3, [r7, #4]
  return(result);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c56:	f3ef 8311 	mrs	r3, BASEPRI
 8001c5a:	603b      	str	r3, [r7, #0]
  return(result);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <osKernelStart+0x3a>
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <osKernelStart+0x68>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d103      	bne.n	8001c72 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001c6a:	f06f 0305 	mvn.w	r3, #5
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e010      	b.n	8001c94 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <osKernelStart+0x68>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d109      	bne.n	8001c8e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001c7a:	f7ff ffa1 	bl	8001bc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <osKernelStart+0x68>)
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001c84:	f001 f888 	bl	8002d98 <vTaskStartScheduler>
      stat = osOK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e002      	b.n	8001c94 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000078 	.word	0x20000078

08001ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b090      	sub	sp, #64	; 0x40
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cb4:	f3ef 8305 	mrs	r3, IPSR
 8001cb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001cba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 808f 	bne.w	8001de0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8001cc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001cce:	f3ef 8311 	mrs	r3, BASEPRI
 8001cd2:	617b      	str	r3, [r7, #20]
  return(result);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <osThreadNew+0x3e>
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <osThreadNew+0x148>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d07e      	beq.n	8001de0 <osThreadNew+0x13c>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d07b      	beq.n	8001de0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001cec:	2318      	movs	r3, #24
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d045      	beq.n	8001d8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <osThreadNew+0x6a>
        name = attr->name;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <osThreadNew+0x90>
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b38      	cmp	r3, #56	; 0x38
 8001d26:	d805      	bhi.n	8001d34 <osThreadNew+0x90>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <osThreadNew+0x94>
        return (NULL);
 8001d34:	2300      	movs	r3, #0
 8001d36:	e054      	b.n	8001de2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <osThreadNew+0xca>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b5b      	cmp	r3, #91	; 0x5b
 8001d56:	d90a      	bls.n	8001d6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <osThreadNew+0xca>
        mem = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	e010      	b.n	8001d90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <osThreadNew+0xec>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <osThreadNew+0xec>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <osThreadNew+0xec>
          mem = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	e001      	b.n	8001d90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d110      	bne.n	8001db8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d9e:	9202      	str	r2, [sp, #8]
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fe1d 	bl	80029ec <xTaskCreateStatic>
 8001db2:	4603      	mov	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e013      	b.n	8001de0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d110      	bne.n	8001de0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fe68 	bl	8002aa6 <xTaskCreate>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <osThreadNew+0x13c>
          hTask = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001de0:	693b      	ldr	r3, [r7, #16]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3730      	adds	r7, #48	; 0x30
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000078 	.word	0x20000078

08001df0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001df8:	f3ef 8305 	mrs	r3, IPSR
 8001dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8001dfe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10f      	bne.n	8001e24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e04:	f3ef 8310 	mrs	r3, PRIMASK
 8001e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e10:	f3ef 8311 	mrs	r3, BASEPRI
 8001e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <osDelay+0x3c>
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <osDelay+0x58>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d103      	bne.n	8001e2c <osDelay+0x3c>
    stat = osErrorISR;
 8001e24:	f06f 0305 	mvn.w	r3, #5
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e007      	b.n	8001e3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 ff7a 	bl	8002d30 <vTaskDelay>
    }
  }

  return (stat);
 8001e3c:	697b      	ldr	r3, [r7, #20]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000078 	.word	0x20000078

08001e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <vApplicationGetIdleTaskMemory+0x30>)
 8001e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	2000007c 	.word	0x2000007c
 8001e7c:	200000d8 	.word	0x200000d8

08001e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <vApplicationGetTimerTaskMemory+0x2c>)
 8001e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8001e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	200002d8 	.word	0x200002d8
 8001eb0:	20000334 	.word	0x20000334

08001eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f103 0208 	add.w	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0208 	add.w	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0208 	add.w	r2, r3, #8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	601a      	str	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6c:	d103      	bne.n	8001f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e00c      	b.n	8001f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e002      	b.n	8001f84 <vListInsert+0x2e>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d2f6      	bcs.n	8001f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	601a      	str	r2, [r3, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6852      	ldr	r2, [r2, #4]
 8001fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d103      	bne.n	8001ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002042:	bf00      	nop
 8002044:	e7fe      	b.n	8002044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002046:	f002 f84d 	bl	80040e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	3b01      	subs	r3, #1
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	441a      	add	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d114      	bne.n	80020c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01a      	beq.n	80020da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3310      	adds	r3, #16
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 f8ff 	bl	80032ac <xTaskRemoveFromEventList>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <xQueueGenericReset+0xcc>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	e009      	b.n	80020da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3310      	adds	r3, #16
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fef2 	bl	8001eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3324      	adds	r3, #36	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff feed 	bl	8001eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020da:	f002 f833 	bl	8004144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	e000ed04 	.word	0xe000ed04

080020ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	; 0x38
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	f383 8811 	msr	BASEPRI, r3
 8002108:	f3bf 8f6f 	isb	sy
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002112:	bf00      	nop
 8002114:	e7fe      	b.n	8002114 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800212e:	bf00      	nop
 8002130:	e7fe      	b.n	8002130 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <xQueueGenericCreateStatic+0x52>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <xQueueGenericCreateStatic+0x56>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <xQueueGenericCreateStatic+0x58>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	623b      	str	r3, [r7, #32]
}
 800215a:	bf00      	nop
 800215c:	e7fe      	b.n	800215c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <xQueueGenericCreateStatic+0x7e>
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <xQueueGenericCreateStatic+0x82>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <xQueueGenericCreateStatic+0x84>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	61fb      	str	r3, [r7, #28]
}
 8002186:	bf00      	nop
 8002188:	e7fe      	b.n	8002188 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800218a:	2350      	movs	r3, #80	; 0x50
 800218c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b50      	cmp	r3, #80	; 0x50
 8002192:	d00a      	beq.n	80021aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	61bb      	str	r3, [r7, #24]
}
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80021aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80021c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f805 	bl	80021dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3730      	adds	r7, #48	; 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e002      	b.n	80021fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800220a:	2101      	movs	r1, #1
 800220c:	69b8      	ldr	r0, [r7, #24]
 800220e:	f7ff ff05 	bl	800201c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08e      	sub	sp, #56	; 0x38
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002232:	2300      	movs	r3, #0
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xQueueGenericSend+0x32>
	__asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <xQueueGenericSend+0x40>
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <xQueueGenericSend+0x44>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <xQueueGenericSend+0x46>
 8002268:	2300      	movs	r3, #0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <xQueueGenericSend+0x60>
	__asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002280:	bf00      	nop
 8002282:	e7fe      	b.n	8002282 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d103      	bne.n	8002292 <xQueueGenericSend+0x6e>
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <xQueueGenericSend+0x72>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <xQueueGenericSend+0x74>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	623b      	str	r3, [r7, #32]
}
 80022ae:	bf00      	nop
 80022b0:	e7fe      	b.n	80022b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022b2:	f001 f9b9 	bl	8003628 <xTaskGetSchedulerState>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <xQueueGenericSend+0x9e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <xQueueGenericSend+0xa2>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <xQueueGenericSend+0xa4>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	61fb      	str	r3, [r7, #28]
}
 80022de:	bf00      	nop
 80022e0:	e7fe      	b.n	80022e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022e2:	f001 feff 	bl	80040e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <xQueueGenericSend+0xd4>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d129      	bne.n	800234c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022fe:	f000 fa07 	bl	8002710 <prvCopyDataToQueue>
 8002302:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b00      	cmp	r3, #0
 800230a:	d010      	beq.n	800232e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3324      	adds	r3, #36	; 0x24
 8002310:	4618      	mov	r0, r3
 8002312:	f000 ffcb 	bl	80032ac <xTaskRemoveFromEventList>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800231c:	4b3f      	ldr	r3, [pc, #252]	; (800241c <xQueueGenericSend+0x1f8>)
 800231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	e00a      	b.n	8002344 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <xQueueGenericSend+0x1f8>)
 8002336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002344:	f001 fefe 	bl	8004144 <vPortExitCritical>
				return pdPASS;
 8002348:	2301      	movs	r3, #1
 800234a:	e063      	b.n	8002414 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002352:	f001 fef7 	bl	8004144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002356:	2300      	movs	r3, #0
 8002358:	e05c      	b.n	8002414 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800235a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f805 	bl	8003374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800236a:	2301      	movs	r3, #1
 800236c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800236e:	f001 fee9 	bl	8004144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002372:	f000 fd77 	bl	8002e64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002376:	f001 feb5 	bl	80040e4 <vPortEnterCritical>
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002380:	b25b      	sxtb	r3, r3
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002386:	d103      	bne.n	8002390 <xQueueGenericSend+0x16c>
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002396:	b25b      	sxtb	r3, r3
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800239c:	d103      	bne.n	80023a6 <xQueueGenericSend+0x182>
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a6:	f001 fecd 	bl	8004144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023aa:	1d3a      	adds	r2, r7, #4
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fff4 	bl	80033a0 <xTaskCheckForTimeOut>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d124      	bne.n	8002408 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023c0:	f000 fa9e 	bl	8002900 <prvIsQueueFull>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d018      	beq.n	80023fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	3310      	adds	r3, #16
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 ff1a 	bl	800320c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023da:	f000 fa29 	bl	8002830 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023de:	f000 fd4f 	bl	8002e80 <xTaskResumeAll>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f af7c 	bne.w	80022e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <xQueueGenericSend+0x1f8>)
 80023ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	e772      	b.n	80022e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023fe:	f000 fa17 	bl	8002830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002402:	f000 fd3d 	bl	8002e80 <xTaskResumeAll>
 8002406:	e76c      	b.n	80022e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800240a:	f000 fa11 	bl	8002830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800240e:	f000 fd37 	bl	8002e80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002412:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002414:	4618      	mov	r0, r3
 8002416:	3738      	adds	r7, #56	; 0x38
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	e000ed04 	.word	0xe000ed04

08002420 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
}
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <xQueueGenericSendFromISR+0x3c>
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <xQueueGenericSendFromISR+0x40>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <xQueueGenericSendFromISR+0x42>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	623b      	str	r3, [r7, #32]
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d103      	bne.n	800248a <xQueueGenericSendFromISR+0x6a>
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <xQueueGenericSendFromISR+0x6e>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <xQueueGenericSendFromISR+0x70>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	61fb      	str	r3, [r7, #28]
}
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024aa:	f001 fefd 	bl	80042a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024ae:	f3ef 8211 	mrs	r2, BASEPRI
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	61ba      	str	r2, [r7, #24]
 80024c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <xQueueGenericSendFromISR+0xbc>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d12c      	bne.n	8002536 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ec:	f000 f910 	bl	8002710 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	d112      	bne.n	8002520 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	3324      	adds	r3, #36	; 0x24
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fed0 	bl	80032ac <xTaskRemoveFromEventList>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e007      	b.n	8002530 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002524:	3301      	adds	r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	b25a      	sxtb	r2, r3
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002530:	2301      	movs	r3, #1
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002534:	e001      	b.n	800253a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002544:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002548:	4618      	mov	r0, r3
 800254a:	3738      	adds	r7, #56	; 0x38
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <xQueueReceive+0x30>
	__asm volatile
 800256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	623b      	str	r3, [r7, #32]
}
 800257c:	bf00      	nop
 800257e:	e7fe      	b.n	800257e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <xQueueReceive+0x3e>
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <xQueueReceive+0x42>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <xQueueReceive+0x44>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <xQueueReceive+0x5e>
	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	61fb      	str	r3, [r7, #28]
}
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025ae:	f001 f83b 	bl	8003628 <xTaskGetSchedulerState>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <xQueueReceive+0x6e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <xQueueReceive+0x72>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <xQueueReceive+0x74>
 80025c2:	2300      	movs	r3, #0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueReceive+0x8e>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	61bb      	str	r3, [r7, #24]
}
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025de:	f001 fd81 	bl	80040e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01f      	beq.n	800262e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f2:	f000 f8f7 	bl	80027e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00f      	beq.n	8002626 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	3310      	adds	r3, #16
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fe4e 	bl	80032ac <xTaskRemoveFromEventList>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <xQueueReceive+0x1bc>)
 8002618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002626:	f001 fd8d 	bl	8004144 <vPortExitCritical>
				return pdPASS;
 800262a:	2301      	movs	r3, #1
 800262c:	e069      	b.n	8002702 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d103      	bne.n	800263c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002634:	f001 fd86 	bl	8004144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002638:	2300      	movs	r3, #0
 800263a:	e062      	b.n	8002702 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002642:	f107 0310 	add.w	r3, r7, #16
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fe94 	bl	8003374 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002650:	f001 fd78 	bl	8004144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002654:	f000 fc06 	bl	8002e64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002658:	f001 fd44 	bl	80040e4 <vPortEnterCritical>
 800265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002662:	b25b      	sxtb	r3, r3
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002668:	d103      	bne.n	8002672 <xQueueReceive+0x122>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002678:	b25b      	sxtb	r3, r3
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800267e:	d103      	bne.n	8002688 <xQueueReceive+0x138>
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002688:	f001 fd5c 	bl	8004144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800268c:	1d3a      	adds	r2, r7, #4
 800268e:	f107 0310 	add.w	r3, r7, #16
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fe83 	bl	80033a0 <xTaskCheckForTimeOut>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d123      	bne.n	80026e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a2:	f000 f917 	bl	80028d4 <prvIsQueueEmpty>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d017      	beq.n	80026dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fda9 	bl	800320c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026bc:	f000 f8b8 	bl	8002830 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026c0:	f000 fbde 	bl	8002e80 <xTaskResumeAll>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d189      	bne.n	80025de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <xQueueReceive+0x1bc>)
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	e780      	b.n	80025de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026de:	f000 f8a7 	bl	8002830 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026e2:	f000 fbcd 	bl	8002e80 <xTaskResumeAll>
 80026e6:	e77a      	b.n	80025de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ea:	f000 f8a1 	bl	8002830 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026ee:	f000 fbc7 	bl	8002e80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f4:	f000 f8ee 	bl	80028d4 <prvIsQueueEmpty>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f43f af6f 	beq.w	80025de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002702:	4618      	mov	r0, r3
 8002704:	3730      	adds	r7, #48	; 0x30
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d14d      	bne.n	80027d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 ff92 	bl	8003664 <xTaskPriorityDisinherit>
 8002740:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e043      	b.n	80027d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d119      	bne.n	8002784 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6858      	ldr	r0, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	461a      	mov	r2, r3
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	f001 ffe2 	bl	8004724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	441a      	add	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d32b      	bcc.n	80027d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e026      	b.n	80027d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68d8      	ldr	r0, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	461a      	mov	r2, r3
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	f001 ffc8 	bl	8004724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	425b      	negs	r3, r3
 800279e:	441a      	add	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d207      	bcs.n	80027c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	425b      	negs	r3, r3
 80027ba:	441a      	add	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d105      	bne.n	80027d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027da:	697b      	ldr	r3, [r7, #20]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	441a      	add	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d303      	bcc.n	8002818 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68d9      	ldr	r1, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	461a      	mov	r2, r3
 8002822:	6838      	ldr	r0, [r7, #0]
 8002824:	f001 ff7e 	bl	8004724 <memcpy>
	}
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002838:	f001 fc54 	bl	80040e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002842:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002844:	e011      	b.n	800286a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d012      	beq.n	8002874 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3324      	adds	r3, #36	; 0x24
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd2a 	bl	80032ac <xTaskRemoveFromEventList>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800285e:	f000 fe01 	bl	8003464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	dce9      	bgt.n	8002846 <prvUnlockQueue+0x16>
 8002872:	e000      	b.n	8002876 <prvUnlockQueue+0x46>
					break;
 8002874:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800287e:	f001 fc61 	bl	8004144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002882:	f001 fc2f 	bl	80040e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800288c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800288e:	e011      	b.n	80028b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3310      	adds	r3, #16
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fd05 	bl	80032ac <xTaskRemoveFromEventList>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80028a8:	f000 fddc 	bl	8003464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028ac:	7bbb      	ldrb	r3, [r7, #14]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	dce9      	bgt.n	8002890 <prvUnlockQueue+0x60>
 80028bc:	e000      	b.n	80028c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028c8:	f001 fc3c 	bl	8004144 <vPortExitCritical>
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028dc:	f001 fc02 	bl	80040e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e001      	b.n	80028f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028f2:	f001 fc27 	bl	8004144 <vPortExitCritical>

	return xReturn;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002908:	f001 fbec 	bl	80040e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	429a      	cmp	r2, r3
 8002916:	d102      	bne.n	800291e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002918:	2301      	movs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e001      	b.n	8002922 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002922:	f001 fc0f 	bl	8004144 <vPortExitCritical>

	return xReturn;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e014      	b.n	800296a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002940:	4a0f      	ldr	r2, [pc, #60]	; (8002980 <vQueueAddToRegistry+0x50>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <vQueueAddToRegistry+0x50>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <vQueueAddToRegistry+0x50>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002962:	e006      	b.n	8002972 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b07      	cmp	r3, #7
 800296e:	d9e7      	bls.n	8002940 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000734 	.word	0x20000734

08002984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002994:	f001 fba6 	bl	80040e4 <vPortEnterCritical>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a4:	d103      	bne.n	80029ae <vQueueWaitForMessageRestricted+0x2a>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b4:	b25b      	sxtb	r3, r3
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ba:	d103      	bne.n	80029c4 <vQueueWaitForMessageRestricted+0x40>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029c4:	f001 fbbe 	bl	8004144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fc3b 	bl	8003254 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff26 	bl	8002830 <prvUnlockQueue>
	}
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	623b      	str	r3, [r7, #32]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a20:	f383 8811 	msr	BASEPRI, r3
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	61fb      	str	r3, [r7, #28]
}
 8002a2e:	bf00      	nop
 8002a30:	e7fe      	b.n	8002a30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a32:	235c      	movs	r3, #92	; 0x5c
 8002a34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b5c      	cmp	r3, #92	; 0x5c
 8002a3a:	d00a      	beq.n	8002a52 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61bb      	str	r3, [r7, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	e7fe      	b.n	8002a50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002a52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01e      	beq.n	8002a98 <xTaskCreateStatic+0xac>
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a72:	2300      	movs	r3, #0
 8002a74:	9303      	str	r3, [sp, #12]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f850 	bl	8002b30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a92:	f000 f8dd 	bl	8002c50 <prvAddNewTaskToReadyList>
 8002a96:	e001      	b.n	8002a9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a9c:	697b      	ldr	r3, [r7, #20]
	}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b08c      	sub	sp, #48	; 0x30
 8002aaa:	af04      	add	r7, sp, #16
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fc34 	bl	8004328 <pvPortMalloc>
 8002ac0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ac8:	205c      	movs	r0, #92	; 0x5c
 8002aca:	f001 fc2d 	bl	8004328 <pvPortMalloc>
 8002ace:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
 8002adc:	e005      	b.n	8002aea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f001 fce6 	bl	80044b0 <vPortFree>
 8002ae4:	e001      	b.n	8002aea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002af8:	88fa      	ldrh	r2, [r7, #6]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f80e 	bl	8002b30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b14:	69f8      	ldr	r0, [r7, #28]
 8002b16:	f000 f89b 	bl	8002c50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e002      	b.n	8002b26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b26:	69bb      	ldr	r3, [r7, #24]
	}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	461a      	mov	r2, r3
 8002b48:	21a5      	movs	r1, #165	; 0xa5
 8002b4a:	f001 fdf9 	bl	8004740 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	617b      	str	r3, [r7, #20]
}
 8002b84:	bf00      	nop
 8002b86:	e7fe      	b.n	8002b86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01f      	beq.n	8002bce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e012      	b.n	8002bba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	7819      	ldrb	r1, [r3, #0]
 8002b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3334      	adds	r3, #52	; 0x34
 8002ba4:	460a      	mov	r2, r1
 8002ba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b0f      	cmp	r3, #15
 8002bbe:	d9e9      	bls.n	8002b94 <prvInitialiseNewTask+0x64>
 8002bc0:	e000      	b.n	8002bc4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002bc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bcc:	e003      	b.n	8002bd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	2b37      	cmp	r3, #55	; 0x37
 8002bda:	d901      	bls.n	8002be0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bdc:	2337      	movs	r3, #55	; 0x37
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	2200      	movs	r2, #0
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f97c 	bl	8001ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	3318      	adds	r3, #24
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f977 	bl	8001ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	2200      	movs	r2, #0
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	69b8      	ldr	r0, [r7, #24]
 8002c30:	f001 f928 	bl	8003e84 <pxPortInitialiseStack>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c46:	bf00      	nop
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c58:	f001 fa44 	bl	80040e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c66:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <prvAddNewTaskToReadyList+0xc4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d110      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c7c:	f000 fc16 	bl	80034ac <prvInitialiseTaskLists>
 8002c80:	e00d      	b.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d802      	bhi.n	8002c9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002ca6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <prvAddNewTaskToReadyList+0xd0>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <prvAddNewTaskToReadyList+0xd4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d903      	bls.n	8002cc4 <prvAddNewTaskToReadyList+0x74>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <prvAddNewTaskToReadyList+0xd4>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <prvAddNewTaskToReadyList+0xd8>)
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7ff f917 	bl	8001f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ce0:	f001 fa30 	bl	8004144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <prvAddNewTaskToReadyList+0xcc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00e      	beq.n	8002d0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <prvAddNewTaskToReadyList+0xc8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d207      	bcs.n	8002d0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <prvAddNewTaskToReadyList+0xdc>)
 8002cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000c48 	.word	0x20000c48
 8002d18:	20000774 	.word	0x20000774
 8002d1c:	20000c54 	.word	0x20000c54
 8002d20:	20000c64 	.word	0x20000c64
 8002d24:	20000c50 	.word	0x20000c50
 8002d28:	20000778 	.word	0x20000778
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <vTaskDelay+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <vTaskDelay+0x30>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	60bb      	str	r3, [r7, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	e7fe      	b.n	8002d5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d60:	f000 f880 	bl	8002e64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d64:	2100      	movs	r1, #0
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fcea 	bl	8003740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d6c:	f000 f888 	bl	8002e80 <xTaskResumeAll>
 8002d70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <vTaskDelay+0x64>)
 8002d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000c70 	.word	0x20000c70
 8002d94:	e000ed04 	.word	0xe000ed04

08002d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002da6:	463a      	mov	r2, r7
 8002da8:	1d39      	adds	r1, r7, #4
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f84c 	bl	8001e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	9202      	str	r2, [sp, #8]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	4921      	ldr	r1, [pc, #132]	; (8002e4c <vTaskStartScheduler+0xb4>)
 8002dc8:	4821      	ldr	r0, [pc, #132]	; (8002e50 <vTaskStartScheduler+0xb8>)
 8002dca:	f7ff fe0f 	bl	80029ec <xTaskCreateStatic>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <vTaskStartScheduler+0xbc>)
 8002dd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <vTaskStartScheduler+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e001      	b.n	8002de6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002dec:	f000 fcfc 	bl	80037e8 <xTimerCreateTimerTask>
 8002df0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d116      	bne.n	8002e26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	613b      	str	r3, [r7, #16]
}
 8002e0a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <vTaskStartScheduler+0xc0>)
 8002e0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <vTaskStartScheduler+0xc4>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <vTaskStartScheduler+0xc8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e20:	f001 f8be 	bl	8003fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e24:	e00e      	b.n	8002e44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2c:	d10a      	bne.n	8002e44 <vTaskStartScheduler+0xac>
	__asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	60fb      	str	r3, [r7, #12]
}
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <vTaskStartScheduler+0xaa>
}
 8002e44:	bf00      	nop
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	08004778 	.word	0x08004778
 8002e50:	0800347d 	.word	0x0800347d
 8002e54:	20000c6c 	.word	0x20000c6c
 8002e58:	20000c68 	.word	0x20000c68
 8002e5c:	20000c54 	.word	0x20000c54
 8002e60:	20000c4c 	.word	0x20000c4c

08002e64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <vTaskSuspendAll+0x18>)
 8002e70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	20000c70 	.word	0x20000c70

08002e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e8e:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <xTaskResumeAll+0x118>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <xTaskResumeAll+0x2c>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	603b      	str	r3, [r7, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002eac:	f001 f91a 	bl	80040e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <xTaskResumeAll+0x118>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a38      	ldr	r2, [pc, #224]	; (8002f98 <xTaskResumeAll+0x118>)
 8002eb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <xTaskResumeAll+0x118>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d162      	bne.n	8002f88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <xTaskResumeAll+0x11c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d05e      	beq.n	8002f88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eca:	e02f      	b.n	8002f2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <xTaskResumeAll+0x120>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f875 	bl	8001fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f870 	bl	8001fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <xTaskResumeAll+0x124>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d903      	bls.n	8002efc <xTaskResumeAll+0x7c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <xTaskResumeAll+0x124>)
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4a27      	ldr	r2, [pc, #156]	; (8002fa8 <xTaskResumeAll+0x128>)
 8002f0a:	441a      	add	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f7fe fffb 	bl	8001f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <xTaskResumeAll+0x12c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <xTaskResumeAll+0x130>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <xTaskResumeAll+0x120>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1cb      	bne.n	8002ecc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f3a:	f000 fb55 	bl	80035e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <xTaskResumeAll+0x134>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f4a:	f000 f847 	bl	8002fdc <xTaskIncrementTick>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <xTaskResumeAll+0x130>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f1      	bne.n	8002f4a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <xTaskResumeAll+0x134>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <xTaskResumeAll+0x130>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d009      	beq.n	8002f88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <xTaskResumeAll+0x138>)
 8002f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f88:	f001 f8dc 	bl	8004144 <vPortExitCritical>

	return xAlreadyYielded;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000c70 	.word	0x20000c70
 8002f9c:	20000c48 	.word	0x20000c48
 8002fa0:	20000c08 	.word	0x20000c08
 8002fa4:	20000c50 	.word	0x20000c50
 8002fa8:	20000778 	.word	0x20000778
 8002fac:	20000774 	.word	0x20000774
 8002fb0:	20000c5c 	.word	0x20000c5c
 8002fb4:	20000c58 	.word	0x20000c58
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <xTaskGetTickCount+0x1c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fc8:	687b      	ldr	r3, [r7, #4]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000c4c 	.word	0x20000c4c

08002fdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <xTaskIncrementTick+0x148>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f040 8089 	bne.w	8003102 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <xTaskIncrementTick+0x14c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ff8:	4a4b      	ldr	r2, [pc, #300]	; (8003128 <xTaskIncrementTick+0x14c>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d120      	bne.n	8003046 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <xTaskIncrementTick+0x150>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <xTaskIncrementTick+0x48>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	603b      	str	r3, [r7, #0]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xTaskIncrementTick+0x46>
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <xTaskIncrementTick+0x150>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b41      	ldr	r3, [pc, #260]	; (8003130 <xTaskIncrementTick+0x154>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a3f      	ldr	r2, [pc, #252]	; (800312c <xTaskIncrementTick+0x150>)
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4a3f      	ldr	r2, [pc, #252]	; (8003130 <xTaskIncrementTick+0x154>)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <xTaskIncrementTick+0x158>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a3d      	ldr	r2, [pc, #244]	; (8003134 <xTaskIncrementTick+0x158>)
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	f000 fad1 	bl	80035e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003046:	4b3c      	ldr	r3, [pc, #240]	; (8003138 <xTaskIncrementTick+0x15c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d349      	bcc.n	80030e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003050:	4b36      	ldr	r3, [pc, #216]	; (800312c <xTaskIncrementTick+0x150>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d104      	bne.n	8003064 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305a:	4b37      	ldr	r3, [pc, #220]	; (8003138 <xTaskIncrementTick+0x15c>)
 800305c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003060:	601a      	str	r2, [r3, #0]
					break;
 8003062:	e03f      	b.n	80030e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <xTaskIncrementTick+0x150>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d203      	bcs.n	8003084 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800307c:	4a2e      	ldr	r2, [pc, #184]	; (8003138 <xTaskIncrementTick+0x15c>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003082:	e02f      	b.n	80030e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	3304      	adds	r3, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe ff9d 	bl	8001fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d004      	beq.n	80030a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3318      	adds	r3, #24
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe ff94 	bl	8001fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <xTaskIncrementTick+0x160>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d903      	bls.n	80030b4 <xTaskIncrementTick+0xd8>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <xTaskIncrementTick+0x160>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <xTaskIncrementTick+0x164>)
 80030c2:	441a      	add	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fe ff1f 	bl	8001f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <xTaskIncrementTick+0x168>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3b8      	bcc.n	8003050 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030de:	2301      	movs	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030e2:	e7b5      	b.n	8003050 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030e4:	4b17      	ldr	r3, [pc, #92]	; (8003144 <xTaskIncrementTick+0x168>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ea:	4915      	ldr	r1, [pc, #84]	; (8003140 <xTaskIncrementTick+0x164>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d907      	bls.n	800310c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	e004      	b.n	800310c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <xTaskIncrementTick+0x16c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <xTaskIncrementTick+0x16c>)
 800310a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <xTaskIncrementTick+0x170>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8003114:	2301      	movs	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003118:	697b      	ldr	r3, [r7, #20]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000c70 	.word	0x20000c70
 8003128:	20000c4c 	.word	0x20000c4c
 800312c:	20000c00 	.word	0x20000c00
 8003130:	20000c04 	.word	0x20000c04
 8003134:	20000c60 	.word	0x20000c60
 8003138:	20000c68 	.word	0x20000c68
 800313c:	20000c50 	.word	0x20000c50
 8003140:	20000778 	.word	0x20000778
 8003144:	20000774 	.word	0x20000774
 8003148:	20000c58 	.word	0x20000c58
 800314c:	20000c5c 	.word	0x20000c5c

08003150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <vTaskSwitchContext+0xa8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <vTaskSwitchContext+0xac>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003164:	e041      	b.n	80031ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <vTaskSwitchContext+0xac>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <vTaskSwitchContext+0xb0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e010      	b.n	8003196 <vTaskSwitchContext+0x46>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <vTaskSwitchContext+0x40>
	__asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	607b      	str	r3, [r7, #4]
}
 800318c:	bf00      	nop
 800318e:	e7fe      	b.n	800318e <vTaskSwitchContext+0x3e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3b01      	subs	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	491b      	ldr	r1, [pc, #108]	; (8003204 <vTaskSwitchContext+0xb4>)
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0e4      	beq.n	8003174 <vTaskSwitchContext+0x24>
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <vTaskSwitchContext+0xb4>)
 80031b6:	4413      	add	r3, r2
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3308      	adds	r3, #8
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d104      	bne.n	80031da <vTaskSwitchContext+0x8a>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4a09      	ldr	r2, [pc, #36]	; (8003208 <vTaskSwitchContext+0xb8>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4a06      	ldr	r2, [pc, #24]	; (8003200 <vTaskSwitchContext+0xb0>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6013      	str	r3, [r2, #0]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000c70 	.word	0x20000c70
 80031fc:	20000c5c 	.word	0x20000c5c
 8003200:	20000c50 	.word	0x20000c50
 8003204:	20000778 	.word	0x20000778
 8003208:	20000774 	.word	0x20000774

0800320c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
}
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <vTaskPlaceOnEventList+0x44>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3318      	adds	r3, #24
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe fe8b 	bl	8001f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003240:	2101      	movs	r1, #1
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	f000 fa7c 	bl	8003740 <prvAddCurrentTaskToDelayedList>
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000774 	.word	0x20000774

08003254 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	617b      	str	r3, [r7, #20]
}
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3318      	adds	r3, #24
 8003282:	4619      	mov	r1, r3
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7fe fe42 	bl	8001f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003294:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68b8      	ldr	r0, [r7, #8]
 800329a:	f000 fa51 	bl	8003740 <prvAddCurrentTaskToDelayedList>
	}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000774 	.word	0x20000774

080032ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	60fb      	str	r3, [r7, #12]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3318      	adds	r3, #24
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fe73 	bl	8001fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <xTaskRemoveFromEventList+0xb0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fe6a 	bl	8001fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <xTaskRemoveFromEventList+0xb4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d903      	bls.n	8003308 <xTaskRemoveFromEventList+0x5c>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a16      	ldr	r2, [pc, #88]	; (8003360 <xTaskRemoveFromEventList+0xb4>)
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4a13      	ldr	r2, [pc, #76]	; (8003364 <xTaskRemoveFromEventList+0xb8>)
 8003316:	441a      	add	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7fe fdf5 	bl	8001f0e <vListInsertEnd>
 8003324:	e005      	b.n	8003332 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3318      	adds	r3, #24
 800332a:	4619      	mov	r1, r3
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <xTaskRemoveFromEventList+0xbc>)
 800332e:	f7fe fdee 	bl	8001f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <xTaskRemoveFromEventList+0xc0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	429a      	cmp	r2, r3
 800333e:	d905      	bls.n	800334c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <xTaskRemoveFromEventList+0xc4>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e001      	b.n	8003350 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003350:	697b      	ldr	r3, [r7, #20]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000c70 	.word	0x20000c70
 8003360:	20000c50 	.word	0x20000c50
 8003364:	20000778 	.word	0x20000778
 8003368:	20000c08 	.word	0x20000c08
 800336c:	20000774 	.word	0x20000774
 8003370:	20000c5c 	.word	0x20000c5c

08003374 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <vTaskInternalSetTimeOutState+0x24>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <vTaskInternalSetTimeOutState+0x28>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	605a      	str	r2, [r3, #4]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000c60 	.word	0x20000c60
 800339c:	20000c4c 	.word	0x20000c4c

080033a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	613b      	str	r3, [r7, #16]
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	60fb      	str	r3, [r7, #12]
}
 80033de:	bf00      	nop
 80033e0:	e7fe      	b.n	80033e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80033e2:	f000 fe7f 	bl	80040e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <xTaskCheckForTimeOut+0xbc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033fe:	d102      	bne.n	8003406 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
 8003404:	e023      	b.n	800344e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <xTaskCheckForTimeOut+0xc0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d007      	beq.n	8003422 <xTaskCheckForTimeOut+0x82>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800341c:	2301      	movs	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	e015      	b.n	800344e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	d20b      	bcs.n	8003444 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad2      	subs	r2, r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff9b 	bl	8003374 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e004      	b.n	800344e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f000 fe79 	bl	8004144 <vPortExitCritical>

	return xReturn;
 8003452:	69fb      	ldr	r3, [r7, #28]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000c4c 	.word	0x20000c4c
 8003460:	20000c60 	.word	0x20000c60

08003464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <vTaskMissedYield+0x14>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000c5c 	.word	0x20000c5c

0800347c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003484:	f000 f852 	bl	800352c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <prvIdleTask+0x28>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d9f9      	bls.n	8003484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <prvIdleTask+0x2c>)
 8003492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034a0:	e7f0      	b.n	8003484 <prvIdleTask+0x8>
 80034a2:	bf00      	nop
 80034a4:	20000778 	.word	0x20000778
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	e00c      	b.n	80034d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <prvInitialiseTaskLists+0x60>)
 80034c4:	4413      	add	r3, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fcf4 	bl	8001eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3301      	adds	r3, #1
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b37      	cmp	r3, #55	; 0x37
 80034d6:	d9ef      	bls.n	80034b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <prvInitialiseTaskLists+0x64>)
 80034da:	f7fe fceb 	bl	8001eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034de:	480d      	ldr	r0, [pc, #52]	; (8003514 <prvInitialiseTaskLists+0x68>)
 80034e0:	f7fe fce8 	bl	8001eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <prvInitialiseTaskLists+0x6c>)
 80034e6:	f7fe fce5 	bl	8001eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034ea:	480c      	ldr	r0, [pc, #48]	; (800351c <prvInitialiseTaskLists+0x70>)
 80034ec:	f7fe fce2 	bl	8001eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034f0:	480b      	ldr	r0, [pc, #44]	; (8003520 <prvInitialiseTaskLists+0x74>)
 80034f2:	f7fe fcdf 	bl	8001eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <prvInitialiseTaskLists+0x78>)
 80034f8:	4a05      	ldr	r2, [pc, #20]	; (8003510 <prvInitialiseTaskLists+0x64>)
 80034fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <prvInitialiseTaskLists+0x7c>)
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <prvInitialiseTaskLists+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000778 	.word	0x20000778
 8003510:	20000bd8 	.word	0x20000bd8
 8003514:	20000bec 	.word	0x20000bec
 8003518:	20000c08 	.word	0x20000c08
 800351c:	20000c1c 	.word	0x20000c1c
 8003520:	20000c34 	.word	0x20000c34
 8003524:	20000c00 	.word	0x20000c00
 8003528:	20000c04 	.word	0x20000c04

0800352c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003532:	e019      	b.n	8003568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003534:	f000 fdd6 	bl	80040e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <prvCheckTasksWaitingTermination+0x50>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fd3f 	bl	8001fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <prvCheckTasksWaitingTermination+0x54>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3b01      	subs	r3, #1
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <prvCheckTasksWaitingTermination+0x54>)
 8003552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <prvCheckTasksWaitingTermination+0x58>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <prvCheckTasksWaitingTermination+0x58>)
 800355c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800355e:	f000 fdf1 	bl	8004144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f810 	bl	8003588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <prvCheckTasksWaitingTermination+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e1      	bne.n	8003534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000c1c 	.word	0x20000c1c
 8003580:	20000c48 	.word	0x20000c48
 8003584:	20000c30 	.word	0x20000c30

08003588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003596:	2b00      	cmp	r3, #0
 8003598:	d108      	bne.n	80035ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ff86 	bl	80044b0 <vPortFree>
				vPortFree( pxTCB );
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 ff83 	bl	80044b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035aa:	e018      	b.n	80035de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d103      	bne.n	80035be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 ff7a 	bl	80044b0 <vPortFree>
	}
 80035bc:	e00f      	b.n	80035de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d00a      	beq.n	80035de <prvDeleteTCB+0x56>
	__asm volatile
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	60fb      	str	r3, [r7, #12]
}
 80035da:	bf00      	nop
 80035dc:	e7fe      	b.n	80035dc <prvDeleteTCB+0x54>
	}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <prvResetNextTaskUnblockTime+0x38>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvResetNextTaskUnblockTime+0x3c>)
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003600:	e008      	b.n	8003614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <prvResetNextTaskUnblockTime+0x38>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <prvResetNextTaskUnblockTime+0x3c>)
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	20000c00 	.word	0x20000c00
 8003624:	20000c68 	.word	0x20000c68

08003628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <xTaskGetSchedulerState+0x34>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003636:	2301      	movs	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e008      	b.n	800364e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <xTaskGetSchedulerState+0x38>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003644:	2302      	movs	r3, #2
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	e001      	b.n	800364e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800364e:	687b      	ldr	r3, [r7, #4]
	}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	20000c54 	.word	0x20000c54
 8003660:	20000c70 	.word	0x20000c70

08003664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d056      	beq.n	8003728 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <xTaskPriorityDisinherit+0xd0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d00a      	beq.n	800369a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60fb      	str	r3, [r7, #12]
}
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60bb      	str	r3, [r7, #8]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036bc:	1e5a      	subs	r2, r3, #1
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d02c      	beq.n	8003728 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d128      	bne.n	8003728 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fc74 	bl	8001fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <xTaskPriorityDisinherit+0xd4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d903      	bls.n	8003708 <xTaskPriorityDisinherit+0xa4>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <xTaskPriorityDisinherit+0xd4>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4a09      	ldr	r2, [pc, #36]	; (800373c <xTaskPriorityDisinherit+0xd8>)
 8003716:	441a      	add	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fe fbf5 	bl	8001f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003728:	697b      	ldr	r3, [r7, #20]
	}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000774 	.word	0x20000774
 8003738:	20000c50 	.word	0x20000c50
 800373c:	20000778 	.word	0x20000778

08003740 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fc36 	bl	8001fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003762:	d10a      	bne.n	800377a <prvAddCurrentTaskToDelayedList+0x3a>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4819      	ldr	r0, [pc, #100]	; (80037d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003774:	f7fe fbcb 	bl	8001f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003778:	e026      	b.n	80037c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	429a      	cmp	r2, r3
 8003790:	d209      	bcs.n	80037a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fe fbd9 	bl	8001f56 <vListInsert>
}
 80037a4:	e010      	b.n	80037c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fe fbcf 	bl	8001f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d202      	bcs.n	80037c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000c4c 	.word	0x20000c4c
 80037d4:	20000774 	.word	0x20000774
 80037d8:	20000c34 	.word	0x20000c34
 80037dc:	20000c04 	.word	0x20000c04
 80037e0:	20000c00 	.word	0x20000c00
 80037e4:	20000c68 	.word	0x20000c68

080037e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037f2:	f000 fb07 	bl	8003e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <xTimerCreateTimerTask+0x80>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d021      	beq.n	8003842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003806:	1d3a      	adds	r2, r7, #4
 8003808:	f107 0108 	add.w	r1, r7, #8
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fb35 	bl	8001e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	9202      	str	r2, [sp, #8]
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	2302      	movs	r3, #2
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2300      	movs	r3, #0
 8003826:	460a      	mov	r2, r1
 8003828:	4910      	ldr	r1, [pc, #64]	; (800386c <xTimerCreateTimerTask+0x84>)
 800382a:	4811      	ldr	r0, [pc, #68]	; (8003870 <xTimerCreateTimerTask+0x88>)
 800382c:	f7ff f8de 	bl	80029ec <xTaskCreateStatic>
 8003830:	4603      	mov	r3, r0
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <xTimerCreateTimerTask+0x8c>)
 8003834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <xTimerCreateTimerTask+0x8c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800383e:	2301      	movs	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	613b      	str	r3, [r7, #16]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800385e:	697b      	ldr	r3, [r7, #20]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000ca4 	.word	0x20000ca4
 800386c:	08004780 	.word	0x08004780
 8003870:	080039ad 	.word	0x080039ad
 8003874:	20000ca8 	.word	0x20000ca8

08003878 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003886:	2300      	movs	r3, #0
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	623b      	str	r3, [r7, #32]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <xTimerGenericCommand+0x98>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02a      	beq.n	8003904 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b05      	cmp	r3, #5
 80038be:	dc18      	bgt.n	80038f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80038c0:	f7ff feb2 	bl	8003628 <xTaskGetSchedulerState>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d109      	bne.n	80038de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <xTimerGenericCommand+0x98>)
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	f107 0110 	add.w	r1, r7, #16
 80038d2:	2300      	movs	r3, #0
 80038d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d6:	f7fe fca5 	bl	8002224 <xQueueGenericSend>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24
 80038dc:	e012      	b.n	8003904 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <xTimerGenericCommand+0x98>)
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	f107 0110 	add.w	r1, r7, #16
 80038e6:	2300      	movs	r3, #0
 80038e8:	2200      	movs	r2, #0
 80038ea:	f7fe fc9b 	bl	8002224 <xQueueGenericSend>
 80038ee:	6278      	str	r0, [r7, #36]	; 0x24
 80038f0:	e008      	b.n	8003904 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <xTimerGenericCommand+0x98>)
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	f107 0110 	add.w	r1, r7, #16
 80038fa:	2300      	movs	r3, #0
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	f7fe fd8f 	bl	8002420 <xQueueGenericSendFromISR>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003906:	4618      	mov	r0, r3
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000ca4 	.word	0x20000ca4

08003914 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <prvProcessExpiredTimer+0x94>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fb4b 	bl	8001fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d022      	beq.n	8003986 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	18d1      	adds	r1, r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	6978      	ldr	r0, [r7, #20]
 800394e:	f000 f8d1 	bl	8003af4 <prvInsertTimerInActiveList>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01f      	beq.n	8003998 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003958:	2300      	movs	r3, #0
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	2300      	movs	r3, #0
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	2100      	movs	r1, #0
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff88 	bl	8003878 <xTimerGenericCommand>
 8003968:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	60fb      	str	r3, [r7, #12]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	4798      	blx	r3
}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000c9c 	.word	0x20000c9c

080039ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039b4:	f107 0308 	add.w	r3, r7, #8
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f857 	bl	8003a6c <prvGetNextExpireTime>
 80039be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4619      	mov	r1, r3
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f803 	bl	80039d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80039ca:	f000 f8d5 	bl	8003b78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ce:	e7f1      	b.n	80039b4 <prvTimerTask+0x8>

080039d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80039da:	f7ff fa43 	bl	8002e64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f866 	bl	8003ab4 <prvSampleTimeNow>
 80039e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d130      	bne.n	8003a52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <prvProcessTimerOrBlockTask+0x3c>
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d806      	bhi.n	8003a0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039fe:	f7ff fa3f 	bl	8002e80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff85 	bl	8003914 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003a0a:	e024      	b.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <prvProcessTimerOrBlockTask+0x90>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <prvProcessTimerOrBlockTask+0x50>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <prvProcessTimerOrBlockTask+0x52>
 8003a20:	2300      	movs	r3, #0
 8003a22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <prvProcessTimerOrBlockTask+0x94>)
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fe ffa7 	bl	8002984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a36:	f7ff fa23 	bl	8002e80 <xTaskResumeAll>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <prvProcessTimerOrBlockTask+0x98>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
}
 8003a50:	e001      	b.n	8003a56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a52:	f7ff fa15 	bl	8002e80 <xTaskResumeAll>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000ca0 	.word	0x20000ca0
 8003a64:	20000ca4 	.word	0x20000ca4
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <prvGetNextExpireTime+0x44>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <prvGetNextExpireTime+0x16>
 8003a7e:	2201      	movs	r2, #1
 8003a80:	e000      	b.n	8003a84 <prvGetNextExpireTime+0x18>
 8003a82:	2200      	movs	r2, #0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d105      	bne.n	8003a9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <prvGetNextExpireTime+0x44>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e001      	b.n	8003aa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000c9c 	.word	0x20000c9c

08003ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003abc:	f7ff fa7e 	bl	8002fbc <xTaskGetTickCount>
 8003ac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <prvSampleTimeNow+0x3c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d205      	bcs.n	8003ad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003acc:	f000 f936 	bl	8003d3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvSampleTimeNow+0x3c>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000cac 	.word	0x20000cac

08003af4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d812      	bhi.n	8003b40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e01b      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <prvInsertTimerInActiveList+0x7c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f7fe fa0c 	bl	8001f56 <vListInsert>
 8003b3e:	e012      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d206      	bcs.n	8003b56 <prvInsertTimerInActiveList+0x62>
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e007      	b.n	8003b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b56:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <prvInsertTimerInActiveList+0x80>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe f9f8 	bl	8001f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b66:	697b      	ldr	r3, [r7, #20]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000ca0 	.word	0x20000ca0
 8003b74:	20000c9c 	.word	0x20000c9c

08003b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b7e:	e0ca      	b.n	8003d16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da18      	bge.n	8003bb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	3304      	adds	r3, #4
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	61fb      	str	r3, [r7, #28]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bae:	6850      	ldr	r0, [r2, #4]
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f2c0 80aa 	blt.w	8003d14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe f9f9 	bl	8001fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff6b 	bl	8003ab4 <prvSampleTimeNow>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	f200 8097 	bhi.w	8003d16 <prvProcessReceivedCommands+0x19e>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <prvProcessReceivedCommands+0x78>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c19 	.word	0x08003c19
 8003bfc:	08003c8d 	.word	0x08003c8d
 8003c00:	08003ca1 	.word	0x08003ca1
 8003c04:	08003ceb 	.word	0x08003ceb
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c19 	.word	0x08003c19
 8003c10:	08003c8d 	.word	0x08003c8d
 8003c14:	08003ca1 	.word	0x08003ca1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	18d1      	adds	r1, r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c38:	f7ff ff5c 	bl	8003af4 <prvInsertTimerInActiveList>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d069      	beq.n	8003d16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05e      	beq.n	8003d16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	441a      	add	r2, r3
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	2100      	movs	r1, #0
 8003c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6a:	f7ff fe05 	bl	8003878 <xTimerGenericCommand>
 8003c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14f      	bne.n	8003d16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61bb      	str	r3, [r7, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003c9e:	e03a      	b.n	8003d16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	617b      	str	r3, [r7, #20]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	18d1      	adds	r1, r2, r3
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce4:	f7ff ff06 	bl	8003af4 <prvInsertTimerInActiveList>
					break;
 8003ce8:	e015      	b.n	8003d16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfa:	f000 fbd9 	bl	80044b0 <vPortFree>
 8003cfe:	e00a      	b.n	8003d16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003d12:	e000      	b.n	8003d16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003d14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <prvProcessReceivedCommands+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	1d39      	adds	r1, r7, #4
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fc16 	bl	8002550 <xQueueReceive>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f af2a 	bne.w	8003b80 <prvProcessReceivedCommands+0x8>
	}
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3730      	adds	r7, #48	; 0x30
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000ca4 	.word	0x20000ca4

08003d3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d42:	e048      	b.n	8003dd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe f933 	bl	8001fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02e      	beq.n	8003dd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90e      	bls.n	8003da8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe f8d8 	bl	8001f56 <vListInsert>
 8003da6:	e016      	b.n	8003dd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003da8:	2300      	movs	r3, #0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	2100      	movs	r1, #0
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f7ff fd60 	bl	8003878 <xTimerGenericCommand>
 8003db8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	603b      	str	r3, [r7, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1b1      	bne.n	8003d44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvSwitchTimerLists+0xc4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <prvSwitchTimerLists+0xc0>)
 8003dec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <prvSwitchTimerLists+0xc4>)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000c9c 	.word	0x20000c9c
 8003e00:	20000ca0 	.word	0x20000ca0

08003e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e0a:	f000 f96b 	bl	80040e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d120      	bne.n	8003e58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e16:	4814      	ldr	r0, [pc, #80]	; (8003e68 <prvCheckForValidListAndQueue+0x64>)
 8003e18:	f7fe f84c 	bl	8001eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e1c:	4813      	ldr	r0, [pc, #76]	; (8003e6c <prvCheckForValidListAndQueue+0x68>)
 8003e1e:	f7fe f849 	bl	8001eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <prvCheckForValidListAndQueue+0x6c>)
 8003e24:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <prvCheckForValidListAndQueue+0x64>)
 8003e26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <prvCheckForValidListAndQueue+0x70>)
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <prvCheckForValidListAndQueue+0x68>)
 8003e2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003e2e:	2300      	movs	r3, #0
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <prvCheckForValidListAndQueue+0x74>)
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <prvCheckForValidListAndQueue+0x78>)
 8003e36:	2110      	movs	r1, #16
 8003e38:	200a      	movs	r0, #10
 8003e3a:	f7fe f957 	bl	80020ec <xQueueGenericCreateStatic>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e44:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <prvCheckForValidListAndQueue+0x60>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	490b      	ldr	r1, [pc, #44]	; (8003e80 <prvCheckForValidListAndQueue+0x7c>)
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe fd6c 	bl	8002930 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e58:	f000 f974 	bl	8004144 <vPortExitCritical>
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000ca4 	.word	0x20000ca4
 8003e68:	20000c74 	.word	0x20000c74
 8003e6c:	20000c88 	.word	0x20000c88
 8003e70:	20000c9c 	.word	0x20000c9c
 8003e74:	20000ca0 	.word	0x20000ca0
 8003e78:	20000d50 	.word	0x20000d50
 8003e7c:	20000cb0 	.word	0x20000cb0
 8003e80:	08004788 	.word	0x08004788

08003e84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3b04      	subs	r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b04      	subs	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <pxPortInitialiseStack+0x64>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3b14      	subs	r3, #20
 8003ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b04      	subs	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f06f 0202 	mvn.w	r2, #2
 8003ed2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b20      	subs	r3, #32
 8003ed8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	08003eed 	.word	0x08003eed

08003eec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <prvTaskExitError+0x54>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efe:	d00a      	beq.n	8003f16 <prvTaskExitError+0x2a>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <prvTaskExitError+0x28>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f2a:	bf00      	nop
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0fc      	beq.n	8003f2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	2000000c 	.word	0x2000000c
	...

08003f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <pxCurrentTCBConst2>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	f380 8809 	msr	PSP, r0
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8811 	msr	BASEPRI, r0
 8003f6a:	4770      	bx	lr
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst2>:
 8003f70:	20000774 	.word	0x20000774
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <prvPortStartFirstTask+0x24>)
 8003f7a:	6800      	ldr	r0, [r0, #0]
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f380 8808 	msr	MSP, r0
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8814 	msr	CONTROL, r0
 8003f8a:	b662      	cpsie	i
 8003f8c:	b661      	cpsie	f
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	df00      	svc	0
 8003f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f9a:	bf00      	nop
 8003f9c:	e000ed08 	.word	0xe000ed08

08003fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fa6:	4b46      	ldr	r3, [pc, #280]	; (80040c0 <xPortStartScheduler+0x120>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a46      	ldr	r2, [pc, #280]	; (80040c4 <xPortStartScheduler+0x124>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10a      	bne.n	8003fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <xPortStartScheduler+0x120>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <xPortStartScheduler+0x128>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10a      	bne.n	8003fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	60fb      	str	r3, [r7, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <xPortStartScheduler+0x12c>)
 8003fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <xPortStartScheduler+0x130>)
 800400c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <xPortStartScheduler+0x134>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004014:	e009      	b.n	800402a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <xPortStartScheduler+0x134>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <xPortStartScheduler+0x134>)
 800401e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d0ef      	beq.n	8004016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004036:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <xPortStartScheduler+0x134>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1c3 0307 	rsb	r3, r3, #7
 800403e:	2b04      	cmp	r3, #4
 8004040:	d00a      	beq.n	8004058 <xPortStartScheduler+0xb8>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	60bb      	str	r3, [r7, #8]
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <xPortStartScheduler+0x134>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <xPortStartScheduler+0x134>)
 8004060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <xPortStartScheduler+0x134>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406a:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <xPortStartScheduler+0x134>)
 800406c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <xPortStartScheduler+0x138>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <xPortStartScheduler+0x138>)
 800407c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004082:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <xPortStartScheduler+0x138>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <xPortStartScheduler+0x138>)
 8004088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800408c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800408e:	f000 f8dd 	bl	800424c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <xPortStartScheduler+0x13c>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004098:	f000 f8fc 	bl	8004294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <xPortStartScheduler+0x140>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0f      	ldr	r2, [pc, #60]	; (80040e0 <xPortStartScheduler+0x140>)
 80040a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040a8:	f7ff ff66 	bl	8003f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040ac:	f7ff f850 	bl	8003150 <vTaskSwitchContext>
	prvTaskExitError();
 80040b0:	f7ff ff1c 	bl	8003eec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000ed00 	.word	0xe000ed00
 80040c4:	410fc271 	.word	0x410fc271
 80040c8:	410fc270 	.word	0x410fc270
 80040cc:	e000e400 	.word	0xe000e400
 80040d0:	20000da0 	.word	0x20000da0
 80040d4:	20000da4 	.word	0x20000da4
 80040d8:	e000ed20 	.word	0xe000ed20
 80040dc:	2000000c 	.word	0x2000000c
 80040e0:	e000ef34 	.word	0xe000ef34

080040e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	607b      	str	r3, [r7, #4]
}
 80040fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <vPortEnterCritical+0x58>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <vPortEnterCritical+0x58>)
 8004106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <vPortEnterCritical+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10f      	bne.n	8004130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <vPortEnterCritical+0x5c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <vPortEnterCritical+0x4c>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	603b      	str	r3, [r7, #0]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vPortEnterCritical+0x4a>
	}
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	2000000c 	.word	0x2000000c
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <vPortExitCritical+0x50>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <vPortExitCritical+0x24>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	607b      	str	r3, [r7, #4]
}
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <vPortExitCritical+0x50>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <vPortExitCritical+0x50>)
 8004170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <vPortExitCritical+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <vPortExitCritical+0x42>
 800417a:	2300      	movs	r3, #0
 800417c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f383 8811 	msr	BASEPRI, r3
}
 8004184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	2000000c 	.word	0x2000000c
	...

080041a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f01e 0f10 	tst.w	lr, #16
 80041b0:	bf08      	it	eq
 80041b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041c4:	f380 8811 	msr	BASEPRI, r0
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f7fe ffbe 	bl	8003150 <vTaskSwitchContext>
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f380 8811 	msr	BASEPRI, r0
 80041dc:	bc09      	pop	{r0, r3}
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e6:	f01e 0f10 	tst.w	lr, #16
 80041ea:	bf08      	it	eq
 80041ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041f0:	f380 8809 	msr	PSP, r0
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst>:
 8004200:	20000774 	.word	0x20000774
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
}
 8004220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004222:	f7fe fedb 	bl	8002fdc <xTaskIncrementTick>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <SysTick_Handler+0x40>)
 800422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	2300      	movs	r3, #0
 8004236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f383 8811 	msr	BASEPRI, r3
}
 800423e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vPortSetupTimerInterrupt+0x38>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <vPortSetupTimerInterrupt+0x3c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	; (800428c <vPortSetupTimerInterrupt+0x40>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	099b      	lsrs	r3, r3, #6
 8004268:	4a09      	ldr	r2, [pc, #36]	; (8004290 <vPortSetupTimerInterrupt+0x44>)
 800426a:	3b01      	subs	r3, #1
 800426c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800426e:	4b04      	ldr	r3, [pc, #16]	; (8004280 <vPortSetupTimerInterrupt+0x34>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010
 8004284:	e000e018 	.word	0xe000e018
 8004288:	20000000 	.word	0x20000000
 800428c:	10624dd3 	.word	0x10624dd3
 8004290:	e000e014 	.word	0xe000e014

08004294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042a4 <vPortEnableVFP+0x10>
 8004298:	6801      	ldr	r1, [r0, #0]
 800429a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800429e:	6001      	str	r1, [r0, #0]
 80042a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042a2:	bf00      	nop
 80042a4:	e000ed88 	.word	0xe000ed88

080042a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042ae:	f3ef 8305 	mrs	r3, IPSR
 80042b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d914      	bls.n	80042e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <vPortValidateInterruptPriority+0x70>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <vPortValidateInterruptPriority+0x74>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	7afa      	ldrb	r2, [r7, #11]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d20a      	bcs.n	80042e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <vPortValidateInterruptPriority+0x78>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <vPortValidateInterruptPriority+0x7c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d90a      	bls.n	800430a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	603b      	str	r3, [r7, #0]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <vPortValidateInterruptPriority+0x60>
	}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e3f0 	.word	0xe000e3f0
 800431c:	20000da0 	.word	0x20000da0
 8004320:	e000ed0c 	.word	0xe000ed0c
 8004324:	20000da4 	.word	0x20000da4

08004328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004334:	f7fe fd96 	bl	8002e64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <pvPortMalloc+0x174>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004340:	f000 f910 	bl	8004564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004344:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <pvPortMalloc+0x178>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 808e 	bne.w	800446e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01d      	beq.n	8004394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004358:	2208      	movs	r2, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <pvPortMalloc+0x6c>
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	617b      	str	r3, [r7, #20]
}
 8004390:	bf00      	nop
 8004392:	e7fe      	b.n	8004392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d069      	beq.n	800446e <pvPortMalloc+0x146>
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <pvPortMalloc+0x17c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d864      	bhi.n	800446e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <pvPortMalloc+0x180>)
 80043a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043a8:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <pvPortMalloc+0x180>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ae:	e004      	b.n	80043ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d903      	bls.n	80043cc <pvPortMalloc+0xa4>
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f1      	bne.n	80043b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <pvPortMalloc+0x174>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d04b      	beq.n	800446e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	4413      	add	r3, r2
 80043de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	2308      	movs	r3, #8
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d91f      	bls.n	8004438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <pvPortMalloc+0xf8>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	613b      	str	r3, [r7, #16]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004432:	69b8      	ldr	r0, [r7, #24]
 8004434:	f000 f8f8 	bl	8004628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <pvPortMalloc+0x17c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <pvPortMalloc+0x17c>)
 8004444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004446:	4b17      	ldr	r3, [pc, #92]	; (80044a4 <pvPortMalloc+0x17c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <pvPortMalloc+0x184>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d203      	bcs.n	800445a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <pvPortMalloc+0x17c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <pvPortMalloc+0x184>)
 8004458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <pvPortMalloc+0x178>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	431a      	orrs	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800446e:	f7fe fd07 	bl	8002e80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <pvPortMalloc+0x16a>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <pvPortMalloc+0x168>
	return pvReturn;
 8004492:	69fb      	ldr	r3, [r7, #28]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	200049b0 	.word	0x200049b0
 80044a0:	200049bc 	.word	0x200049bc
 80044a4:	200049b4 	.word	0x200049b4
 80044a8:	200049a8 	.word	0x200049a8
 80044ac:	200049b8 	.word	0x200049b8

080044b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d048      	beq.n	8004554 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80044c2:	2308      	movs	r3, #8
 80044c4:	425b      	negs	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <vPortFree+0xac>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vPortFree+0x44>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60fb      	str	r3, [r7, #12]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <vPortFree+0x62>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	60bb      	str	r3, [r7, #8]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <vPortFree+0xac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d115      	bne.n	8004554 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <vPortFree+0xac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004538:	f7fe fc94 	bl	8002e64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <vPortFree+0xb0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4413      	add	r3, r2
 8004546:	4a06      	ldr	r2, [pc, #24]	; (8004560 <vPortFree+0xb0>)
 8004548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800454a:	6938      	ldr	r0, [r7, #16]
 800454c:	f000 f86c 	bl	8004628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004550:	f7fe fc96 	bl	8002e80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004554:	bf00      	nop
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200049bc 	.word	0x200049bc
 8004560:	200049b4 	.word	0x200049b4

08004564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800456a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800456e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <prvHeapInit+0xac>)
 8004572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3307      	adds	r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <prvHeapInit+0xac>)
 8004594:	4413      	add	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <prvHeapInit+0xb0>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <prvHeapInit+0xb0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4413      	add	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045b0:	2208      	movs	r2, #8
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a15      	ldr	r2, [pc, #84]	; (8004618 <prvHeapInit+0xb4>)
 80045c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <prvHeapInit+0xb4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <prvHeapInit+0xb4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <prvHeapInit+0xb4>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <prvHeapInit+0xb8>)
 80045f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <prvHeapInit+0xbc>)
 80045fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <prvHeapInit+0xc0>)
 80045fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000da8 	.word	0x20000da8
 8004614:	200049a8 	.word	0x200049a8
 8004618:	200049b0 	.word	0x200049b0
 800461c:	200049b8 	.word	0x200049b8
 8004620:	200049b4 	.word	0x200049b4
 8004624:	200049bc 	.word	0x200049bc

08004628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004630:	4b28      	ldr	r3, [pc, #160]	; (80046d4 <prvInsertBlockIntoFreeList+0xac>)
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e002      	b.n	800463c <prvInsertBlockIntoFreeList+0x14>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d8f7      	bhi.n	8004636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4413      	add	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d108      	bne.n	800466a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	441a      	add	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d118      	bne.n	80046b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d00d      	beq.n	80046a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e008      	b.n	80046b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <prvInsertBlockIntoFreeList+0xb0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e003      	b.n	80046b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d002      	beq.n	80046c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	200049a8 	.word	0x200049a8
 80046d8:	200049b0 	.word	0x200049b0

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4d0d      	ldr	r5, [pc, #52]	; (8004714 <__libc_init_array+0x38>)
 80046e0:	4c0d      	ldr	r4, [pc, #52]	; (8004718 <__libc_init_array+0x3c>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	2600      	movs	r6, #0
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	4d0b      	ldr	r5, [pc, #44]	; (800471c <__libc_init_array+0x40>)
 80046ee:	4c0c      	ldr	r4, [pc, #48]	; (8004720 <__libc_init_array+0x44>)
 80046f0:	f000 f82e 	bl	8004750 <_init>
 80046f4:	1b64      	subs	r4, r4, r5
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	2600      	movs	r6, #0
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	080047f8 	.word	0x080047f8
 8004718:	080047f8 	.word	0x080047f8
 800471c:	080047f8 	.word	0x080047f8
 8004720:	080047fc 	.word	0x080047fc

08004724 <memcpy>:
 8004724:	440a      	add	r2, r1
 8004726:	4291      	cmp	r1, r2
 8004728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800472c:	d100      	bne.n	8004730 <memcpy+0xc>
 800472e:	4770      	bx	lr
 8004730:	b510      	push	{r4, lr}
 8004732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473a:	4291      	cmp	r1, r2
 800473c:	d1f9      	bne.n	8004732 <memcpy+0xe>
 800473e:	bd10      	pop	{r4, pc}

08004740 <memset>:
 8004740:	4402      	add	r2, r0
 8004742:	4603      	mov	r3, r0
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	f803 1b01 	strb.w	r1, [r3], #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <_init>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr

0800475c <_fini>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr
